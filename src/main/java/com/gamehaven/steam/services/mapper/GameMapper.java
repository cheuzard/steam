package com.gamehaven.steam.services.mapper;

import com.gamehaven.steam.model.*;
import com.gamehaven.steam.services.DTO.*;
import org.mapstruct.*;

import java.util.List;

/**
 *  MapStruct mapper that converts the flat *GameDetailsDTO* graph that comes from Steam
 *  into our JPA *Game* aggregate – including every embedded / nested element that the
 *  entity tree expects.
 *
 *  <p>Because MapStruct generates the implementation at compile‑time we only need this
 *  declarative description.  Spring picks the generated implementation up automatically
 *  thanks to the {@code componentModel = "spring"} option.</p>
 */
@Mapper(componentModel = "spring", injectionStrategy = InjectionStrategy.CONSTRUCTOR,builder = @Builder(disableBuilder = true))
public interface GameMapper {

    /* ------------------------------------------------------------------ */
    /*   ROOT                                                             */
    /* ------------------------------------------------------------------ */

    @Mapping(target = "id",            source = "id")   // PK generated by DB
    @Mapping(target = "dlcs",          ignore = true)   // resolved in service layer with repository
    @Mapping(target = "platform",      source = "platforms")
    @Mapping(target = "pcRequirements",source = "pcRequirements")
    @Mapping(target = "priceOverview", source = "priceOverview")
    @Mapping(target = "genres",        source = "genres")
    @Mapping(target = "screenshots",   source = "screenshots")
    @Mapping(target = "trailers",      source = "trailers")
    @Mapping(target = "releaseDate",   source = "releaseDate")
    @Mapping(target = "ratings",       source = "ratings")
    Game toEntity(GameDetailsDTO dto);

    /* ------------------------------------------------------------------ */
    /*   VALUE & EMBEDDED TYPES                                           */
    /* ------------------------------------------------------------------ */

    Platform       toEntity(PlatformDTO dto);
    PriceOverview  toEntity(PriceOverviewDTO dto);
    PcRequirements toEntity(PcRequirementsDTO dto);
    ReleaseDate    toEntity(ReleaseDateDTO dto);
    Ratings        toEntity(RatingsDTO dto);
    /* ------------------------------------------------------------------ */
    /*   COLLECTION ELEMENTS                                              */
    /* ------------------------------------------------------------------ */

    default Genre toEntity(GenreDTO dto) {
        if (dto == null) return null;
        return new Genre(dto.getId(), dto.getDescription());
    }

    @Mapping(target = "screenShotID", ignore = true)   // filled in @AfterMapping
    @Mapping(target = "game",        ignore = true)
    Screenshot toEntity(ScreenshotDTO dto);

    /*
     *  We map the numeric `id` coming from Steam (MovieDTO.id) into the nested
     *  composite‑key field `Movie.id.id` – MapStruct automatically instantiates
     *  the `MovieID` embeddable for us.  The `gameId` part of the key is
     *  populated later by Hibernate thanks to the `@MapsId("gameId")` relation,
     *  so we can ignore it here.
     */
    @Mapping(target = "id.id",      source = "id")
    @Mapping(target = "game",       ignore = true)
    Movie toEntity(MovieDTO dto);

    /* ------------------------------------------------------------------ */
    /*   HOUSE‑KEEPING                                                    */
    /* ------------------------------------------------------------------ */

    /**
     *  After the main graph is built we still need to complete the bi‑directional
     *  links so that JPA cascade persist works flawlessly (and removes orphaned
     *  rows where appropriate).
     */
    @AfterMapping
    default void linkChildEntities(@MappingTarget Game game) {
        if (game == null) return;

        // screenshots ----------------------------------------------------
        List<Screenshot> screenshots = game.getScreenshots();
        if (screenshots != null) {
            int index = 0;
            for (Screenshot s : screenshots) {
                s.setGame(game);
                s.setScreenShotID(new ScreenShotID(game.getId(), index++));
            }
        }

        // trailers / movies ---------------------------------------------
        List<Movie> movies = game.getTrailers();
        if (movies != null) {
            for (Movie m : movies) {
                m.setGame(game);   // `@MapsId` will copy the Game PK into MovieID.gameId
            }
        }
    }
}
